/* Definition section */
%{
    #include "common.h"
    #include "y.tab.h"	/* header file generated by bison */
    extern YYSTYPE yylval;

    #define YY_NO_UNPUT
    #define YY_NO_INPUT
%}

/* Define regular expression label */
letter [a-zA-Z_]
digit [0-9]
id {letter}+({letter}|{digit})*
inumber {digit}+
fnumber ({digit}*\.{digit}+)
%x str
%x c_comment
%option yylineno

/* Rules section */
%%

"//"[^\n]*          {;}
"/*"(.)*"*/"        {;}

"/*"(.)*            { BEGIN(c_comment); }
<c_comment>"*/"     { BEGIN(INITIAL);}
<c_comment>\n       {;}
<c_comment>.        {;}

"+"        { return ADD; }
"-"        { return SUB; }
"*"        { return MUL; }
"/"        { return QUO; }
"%"        { return REM; }
"++"       { return INC; }
"--"       { return DEC; }

">"        { return GTR; }
"<"        { return LSS; }
">="       { return GEQ; }
"<="       { return LEQ; }
"=="       { return EQL; }
"!="       { return NEQ; }

"="        { return ASSIGN; }
"+="       { return ADD_ASSIGN; }
"-="       { return SUB_ASSIGN; }
"*="       { return MUL_ASSIGN; }
"/="       { return QUO_ASSIGN; }
"%="       { return REM_ASSIGN; }

"&&"       { return AND; }
"||"       { return OR; }
"!"        { return NOT; }

"("        { return LPAREN; }
")"        { return RPAREN; }
"["        { return LBRACK; }
"]"        { return RBRACK; }
"{"        { return LBRACE; }
"}"        { return RBRACE; }
";"        { return SEMICOLON; }
","        { return COMMA; }

"\""          { BEGIN(str); }
<str>[^\"]*   { yylval.s_val = strdup(yytext);
                return STRING_LIT; }
<str>"\""     { BEGIN(INITIAL); }

"print"    { return PRINT; }
"return"   { return RETURN; }
"if"       { return IF; }
"else"     { return ELSE; }
"for"      { return FOR; }
"while"    { return WHILE; }
"int"      { return INT; }
"float"    { return FLOAT; }
"string"   { return STRING; }
"bool"     { return BOOL; }
"true"     { return TRUE; }
"false"    { return FALSE; }
"continue" { return CONTINUE; }
"break"    { return BREAK; }
"void"     { return VOID; }

{inumber}  { yylval.i_val = atoi(yytext);
             return INT_LIT; }
{fnumber}  { yylval.f_val = atof(yytext); 
             return FLOAT_LIT; }
{id}       { yylval.s_val = strdup(yytext);
             return IDENT; }

<<EOF>>     { static int once = 0;
                if (once++){
                    yyterminate();
                }
            }
\n         {;}
[\t]+      {;}
.          {;}

%%

/*  C Code section */
int yywrap(void)
{
    return 1;
}